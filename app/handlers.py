import asyncio
import os
import time as tim
import logging
from datetime import datetime, time, timedelta, date
import re
from aiogram import Bot
from aiogram import types, F, Router
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import app.keyboards as kb
import app.database.requests as rq
from dotenv import load_dotenv

router = Router()


class Register(StatesGroup):
    initials = State()


@router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    if ((await rq.get_user_tg_id(message.from_user.id) is not None) and (
            await rq.get_user_chat_id(message.from_user.id) is not None) and (
            await rq.get_user_initials(message.from_user.id) is not None)):
        await message.answer(
            f'{await rq.get_user_initials(message.from_user.id)}, —Ä–∞–¥—ã —Å–Ω–æ–≤–∞ –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ PanKletki',
            reply_markup=kb.main_buttuns)
    elif ((await rq.get_user_tg_id(message.from_user.id) is not None) and (
            await rq.get_user_chat_id(message.from_user.id) is not None) and (
                  await rq.get_user_initials(message.from_user.id) is None)):
        await message.answer('–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
        await state.set_state(Register.initials)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û')
    else:
        await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ pankletki. –ù–µ–æ–±—Ö–æ–¥–∏–º—É –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ—Å—Ç—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û')
        await rq.set_user(message.from_user.id, message.chat.id)
        await state.set_state(Register.initials)


@router.message(Register.initials)
async def register_user(message: types.Message, state: FSMContext):
    await state.update_data(initials=message.text)
    await rq.set_initials(message.from_user.id, message.text)
    data = await state.get_data()
    await message.answer(
        f'–í–∞—à–µ –§–ò–û: {data["initials"]}', reply_markup=kb.edit_button)
    await state.clear()


@router.callback_query(F.data == 'data_is_right')
async def accepst_initials(callback: types.CallbackQuery):
    await callback.message.answer('–û—Ç–ª–∏—á–Ω–æ, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–∞!',
                                  reply_markup=kb.main_buttuns)
    await callback.answer()


@router.callback_query(F.data == 'editor')
async def edit_personal_data(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(Register.initials)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –§–ò–û', reply_markup=kb.space)


@router.message(F.text == '‚ìò–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
async def main_personal_data(message: types.Message):
    if await rq.get_user_initials(message.from_user.id):
        await message.answer(
            f'–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ: \n –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: in progress \n –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: in progress \n –í–∞—à–µ –§–ò–û: {await rq.get_user_initials(message.from_user.id)}',
            reply_markup=kb.edit_main_buttons)


@router.callback_query(F.data == 'accept')
async def acceppted_personal_data(callback: types.CallbackQuery):
    await callback.answer('–£—Å–ø–µ—à–Ω–æ!')
    await callback.message.answer('‚úÖ')


@router.callback_query(F.data == 'edit')
async def edit_main_persoanl_data(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(Register.initials)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –§–ò–û', reply_markup=kb.space)


@router.message(F.text == 'üìã–ö–∞—Ç–∞–ª–æ–≥')
async def check_catalog(message: types.Message):
    keyboard = await kb.get_catas()
    await message.answer('–ö–∞–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?', reply_markup=keyboard)
